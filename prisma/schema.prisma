datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  SERVICE_PROVIDER
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  firstName     String
  lastName      String
  phone         String
  email         String     @unique
  emailVerified DateTime?
  image         String?
  role          UserRole   @default(USER)
  password      String?
  status        Boolean    @default(true)
  accounts      Account[]
  sessions      Session[]
  categories    Category[]
  isVerfied     Boolean    @default(false)
  token         Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Category {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  slug   String  @unique
  userId String  @db.ObjectId
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shorts Short[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Short {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  tag        String?
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
